version: 2.1

executors:
  python-docker:
    docker:
      - image: cimg/python:3.9.13
    resource_class: medium
  pip-tools-docker:
    docker:
      - image: python:3.9.13
    resource_class: medium
  base:
    docker:
      - image: cimg/base:stable
    resource_class: small


# Define the jobs we want to run for this project
jobs:
  pre-commit:
    executor: pip-tools-docker
    steps:
      - checkout
      - run:
          name: Generate Cache Key
          command: |
            echo date +%Y-%V > circleci_cache_key
            echo python -V >> circleci_cache_key
      - restore_cache:
          key: v1-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
      - run:
          # NOTE: Requires redundant "pip install -U pip" command to avoid OSError
          name: Run Pre-commit
          # TODO: DEVV-329, DEVV-330, DEVV-333; Fix existing issues with flake8, bandit, & pip-tools
          # pre-commit run --all-files
          command: |
            pip install -U pip
            pip install ".[tests]"
            pre-commit run
            pre-commit run --all-files --hook-stage manual pip-tools-compile
      - save_cache:
          key: v1-{{ arch }}-{{ checksum "pyproject.toml" }}-{{ checksum "circleci_cache_key" }}
          paths:
            - ~/.cache/pip
            - ~/.cache/pre-commit
  test:
    executor: python-docker
    steps:
      - checkout
      - run:
          name: Generate Cache Key
          command: |
            echo date +%Y-%V > circleci_cache_key
            echo python -V >> circleci_cache_key
            sha256sum pyproject.toml >> circleci_cache_key
      - restore_cache:
          key: v2-{{ arch }}-{{ .Branch }}-{{ checksum "circleci_cache_key" }}
      - run:
          name: Instantiate Python Virtual Environment
          command: |
            test -d "venv" || python -m venv ~/venv
            . ~/venv/bin/activate
            pip install --upgrade pip
            pip install ".[build,docs,tests]" -c requirements/requirements.txt
      - save_cache:
          key: v2-{{ arch }}-{{ .Branch }}-{{ checksum "circleci_cache_key" }}
          paths:
            - ~/venv
            - ~/.cache/pip
      - run:
          name: Generate Sphinx Docs
          command: . ~/venv/bin/activate && sphinx-build -b html docs/source docs/build/html
      - run:
          name: Run Pytest
          command: . ~/venv/bin/activate && pytest
          when: always
      - run:
          name: Build Python Package
          command: . ~/venv/bin/activate && python -m build
      - store_test_results:
          path: test_reports/circleci
      - store_artifacts:
          path: test_reports
      - store_artifacts:
          path: docs/build/html
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - dist
  publish-python:
    executor: python-docker
    steps:
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - attach_workspace:
                at: .
            - attach_workspace:
                at: $CIRCLE_WORKING_DIRECTORY
            - run:
                name: Publish Python Package
                command: 'echo "TODO: Enable once package is ready to be published to pypi'
                # TODO: Enable once package is ready to be published to pypi
                # command: pip install twine && twine upload dist/*
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run: echo "Python package will not be published since this is not a tagged build."

# Orchestrate our job run sequence
workflows:
  build-test:
    jobs:
      - pre-commit
      - test
  build-test-publish:
    jobs:
      - pre-commit:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - test:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish-python:
          requires:
            - pre-commit
            - test
  weekly_cron:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - pre-commit
      - test
