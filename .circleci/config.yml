version: 2.1

orbs:
  docker: circleci/docker@2.2.0

executors:
  python-docker:
    docker:
      - image: cimg/python:3.9.13
    resource_class: medium

# Define the jobs we want to run for this project
jobs:
  build-test:
    executor: python-docker
    steps:
      - checkout
      - run:
          name: Generate Cache Key
          command: |
            echo date +%Y-%V > circleci_cache_key
            echo python -V >> circleci_cache_key
            sha256sum pyproject.toml >> circleci_cache_key
      - restore_cache:
          key: v2-{{ arch }}-{{ .Branch }}-{{ checksum "circleci_cache_key" }}
      - run:
          name: Instantiate Python Virtual Environment
          command: |
            test -d "venv" || python -m venv ~/venv
            . ~/venv/bin/activate
            pip install --upgrade pip
            pip install ".[build,docs,tests]"
      - run:
          name: Run Pre-commit
          # TODO: DEVV-329, DEVV-330, DEVV-333; Fix existing issues with flake8, bandit, & pip-tools
          # pre-commit run --all-files --hook-stage manual
          command: . ~/venv/bin/activate && pre-commit run --hook-stage manual
      - save_cache:
          key: v2-{{ arch }}-{{ .Branch }}-{{ checksum "circleci_cache_key" }}
          paths:
            - ~/venv
            - ~/.cache/pip
            - ~/.cache/pre-commit
            - ~/.cache/pip-tools
      - run:
          name: Generate Sphinx Docs
          # TODO: DEVV-332; Fix "make-html" issues and re-enable this flow
          # . ~/venv/bin/activate && cd docs && make html
          command: 'echo "TODO: Fix make-html issues in Sphinx"'
      - run:
          name: Run Pytest
          command: . ~/venv/bin/activate && pytest
      - run:
          name: Build Python Package
          command: . ~/venv/bin/activate && python -m build
      - store_test_results:
          path: test_reports/circleci
      - store_artifacts:
          path: test_reports
      - store_artifacts:
          path: docs/build/html

      - when:
          condition: << pipeline.git.tag >>
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - dist
  publish-python:
    executor: python-docker
    steps:
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - attach_workspace:
                at: .
            - attach_workspace:
                at: $CIRCLE_WORKING_DIRECTORY
            - run:
                name: Publish Python Package
                command: 'echo "TODO: Enable once package is ready to be published to pypi'
                # TODO: Enable once package is ready to be published to pypi
                # command: pip install twine && twine upload dist/*
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run: echo "Python package will not be published since this is not a tagged build."

# Orchestrate our job run sequence
workflows:
  pr-check:
    jobs:
      - build-test:
          filters:
            tags:
              only: /^v.*/
      - publish-python:
          filters:
            tags:
              only: /^v.*/
            branches:
              only: main
          requires:
            - build-test
  weekly_cron:
    triggers:
      - schedule:
          cron: "0 0 * * 6"
          filters:
            branches:
              only:
                - main
    jobs:
      - build-test
